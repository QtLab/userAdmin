/*! userAdmin 27-11-2014 */
function getLogger(a){var b=a.filename.split("/").slice(-2).join("/");return new winston.Logger({transports:[new winston.transports.Console({colorize:!0,level:"debug",label:b})]})}!function(){"use strict";{var a=require("../libs/config"),b=require("passport"),c=require("passport-http").BasicStrategy,d=require("passport-oauth2-client-password").Strategy,e=require("passport-http-bearer").Strategy,f=require("../models/users").UserModel,g=require("../models/client").ClientModel,h=require("../models/accessToken").AccessTokenModel;require("../models/refreshToken").RefreshTokenModel}b.use(new c(function(a,b,c){g.findOne({clientId:a},function(a,d){return a?c(a):d?d.clientSecret!=b?c(null,!1):c(null,d):c(null,!1)})})),b.use(new d(function(a,b,c){g.findOne({clientId:a},function(a,d){return a?c(a):d?d.clientSecret!=b?c(null,!1):c(null,d):c(null,!1)})})),b.use(new e(function(b,c){h.findOne({token:b},function(d,e){return d?c(d):e?Math.round((Date.now()-e.created)/1e3)>a.get("security:tokenLife")?(h.remove({token:b},function(a){return a?c(a):void 0}),c(null,!1,{message:"Token expired"})):void f.findById(e.userId,function(a,b){if(a)return c(a);if(!b)return c(null,!1,{message:"Unknown user"});var d={scope:"*"};c(null,b,d)}):c(null,!1)})}))}(),function(){"use strict";var a=(require("mongoose"),require("oauth2orize")),b=require("passport"),c=require("crypto"),d=require("../libs/config"),e=require("../models/users").UserModel,f=require("../models/accessToken").AccessTokenModel,g=require("../models/refreshToken").RefreshTokenModel,h=a.createServer(),i=function(a,b){return b?a(b):void 0},j=function(a,b){var e,h,j,k,l=i.bind(void 0,b);g.remove(a,l),f.remove(a,l),k=c.randomBytes(32).toString("base64"),h=c.randomBytes(32).toString("base64"),a.token=k,j=new f(a),a.token=h,e=new g(a),e.save(l),j.save(function(a){return a?b(a):void b(null,k,h,{expires_in:d.get("security:tokenLife")})})};h.exchange(a.exchange.password(function(a,b,c,d,f){e.findOne({username:b},function(b,d){if(b)return f(b);if(!d||!d.checkPassword(c))return f(null,!1);var e={userId:d.userId,clientId:a.clientId};j(e,f)})})),h.exchange(a.exchange.refreshToken(function(a,b,c,d){g.findOne({token:b,clientId:a.clientId},function(b,c){return b?d(b):c?void e.findById(c.userId,function(b,c){if(b)return d(b);if(!c)return d(null,!1);var e={userId:c.userId,clientId:a.clientId};j(e,d)}):d(null,!1)})})),exports.token=[b.authenticate(["basic","oauth2-client-password"],{session:!1}),h.token(),h.errorHandler()],exports.isAuthenticated=b.authenticate("bearer",{session:!1})}(),function(){"use strict";function a(a,c){var d=new b(a),e={isValid:null,messages:[],userId:null};b.findOne({username:d.username},function(a,b){a&&c(a),b?(e.isValid=!1,e.messages.push("User already exists"),c(null,e)):d.save(function(a,b){a?c(a):(e.isValid=!0,e.userId=b.userId,e.messages.push("User created"),c(null,e))})})}var b=(require("../libs/log")(module),require("../models/users").UserModel);exports.create=a,exports.postUsers=function(b,c){a(b.body,function(a,b){c.json(b)})}}();var nconf=require("nconf");nconf.argv().env().file({file:"./src/config.json"}),module.exports=nconf;var mongoose=require("mongoose"),log=require("../libs/log")(module),config=require("../libs/config"),db=mongoose.connection;db.on("error",function(a){log.error("connection error:",a.message)}),db.once("open",function(){log.info("Connected to DB!")}),module.exports.mongoose=mongoose;var winston=require("winston");module.exports=getLogger;var mongoose=require("mongoose"),Schema=mongoose.Schema,AccessToken=new Schema({userId:{type:String,required:!0},clientId:{type:String,required:!0},token:{type:String,unique:!0,required:!0},created:{type:Date,"default":Date.now}});module.exports.AccessTokenModel=mongoose.model("AccessToken",AccessToken);var mongoose=require("mongoose"),Schema=mongoose.Schema,Client=new Schema({name:{type:String,unique:!0,required:!0},clientId:{type:String,unique:!0,required:!0},clientSecret:{type:String,required:!0}});module.exports.ClientModel=mongoose.model("Client",Client);var mongoose=require("mongoose"),Schema=mongoose.Schema,RefreshToken=new Schema({userId:{type:String,required:!0},clientId:{type:String,required:!0},token:{type:String,unique:!0,required:!0},created:{type:Date,"default":Date.now}});module.exports.RefreshTokenModel=mongoose.model("RefreshToken",RefreshToken);var mongoose=require("mongoose"),log=require("../libs/log")(module),config=require("../libs/config"),crypto=require("crypto"),Schema=mongoose.Schema,User=new Schema({username:{type:String,unique:!0,required:!0},hashedPassword:{type:String,required:!0},salt:{type:String,required:!0},created:{type:Date,"default":Date.now}});User.methods.encryptPassword=function(a){return crypto.createHmac("sha1",this.salt).update(a).digest("hex")},User.virtual("userId").get(function(){return this.id}),User.virtual("password").set(function(a){this._plainPassword=a,this.salt=crypto.randomBytes(32).toString("base64"),this.hashedPassword=this.encryptPassword(a)}).get(function(){return this._plainPassword}),User.methods.checkPassword=function(a){return this.encryptPassword(a)===this.hashedPassword},module.exports.UserModel=mongoose.model("User",User);var express=require("express"),favicon=require("serve-favicon"),methodOverride=require("method-override"),path=require("path"),passport=require("passport"),bodyParser=require("body-parser"),config=require("./libs/config"),mongoose=require("./libs/db").mongoose,log=require("./libs/log")(module),oauth2=require("./controllers/oauth2"),authController=require("./controllers/auth"),usersController=require("./controllers/users"),app=express();app.use(favicon(__dirname+"/public/favicon.ico")),app.use(bodyParser.urlencoded({extended:!0})),app.use(bodyParser.json()),app.use(passport.initialize()),app.use(methodOverride("X-HTTP-Method-Override")),mongoose.connect(config.get("mongoose:uri"),function(a){if(a)throw a}),"test"==process.env.NODE_ENV&&app.use(function(a,b,c){b.setHeader("Access-Control-Allow-Origin","*"),b.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),b.setHeader("Access-Control-Allow-Headers","X-Requested-With,content-type"),b.setHeader("Access-Control-Allow-Credentials",!0),b.setHeader("Access-Control-Allow-Headers","Authorization"),c()}),app.use(express.static(path.join(__dirname,"public"))),app.post("/oauth/token",oauth2.token),app.get("/api",oauth2.isAuthenticated,function(a,b){b.send("API is running")}),app.get("/api/user",oauth2.isAuthenticated,function(a,b){b.json({user_id:a.user.userId,name:a.user.username,scope:a.authInfo.scope})}),app.post("/api/user",usersController.postUsers),app.get("/ErrorExample",function(a,b,c){c(new Error("Random error!"))}),app.use(function(a,b){b.status(404),log.debug("Not found URL: %s",a.url),b.send({error:"Not found"})}),app.use(function(a,b,c){c.status(a.status||500),log.error("Internal error(%d): %s",c.statusCode,a.message),c.send({error:a.message})}),app.listen(config.get("port"),function(){log.info("Express server listening on port "+config.get("port"))});