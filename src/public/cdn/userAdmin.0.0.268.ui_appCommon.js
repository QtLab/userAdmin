/// <reference path="VsixMvcAppResult.A.Intellisense.js" />
if (!window.console) {
    console = {
        log: function (msg) {

        }
    };
}

/*jslint evil: true */
String.prototype.toDateFromAspNet = function () {
    var dte = eval("new " + this.replace(/\//g, '') + ";");
    dte.setMinutes(dte.getMinutes() - dte.getTimezoneOffset());
    return dte;
};

String.prototype.toBoolean = function () {
    return (/^true$/i).test(this);
};

function parseBoolean(value) {
    return value.toBoolean();
}

var VsixMvcAppResult = {};


;// This file has been auto generated by T4 Text Templates
// Changes to this file may be overriden at compile time



jQuery(document).ready(function() {
    jQuery.ajaxSetup({
        type: "GET",
        contentType: "application/json; charset=utf-8",
        dataType: "json"
    });
});

VsixMvcAppResult.Ajax = {};

VsixMvcAppResult.Ajax.ThemeSet = function(theme, onOK, onKO) {
    var jqxhr = jQuery.ajax({
            url: "/api/user/theme",
            type: "POST",
            data: JSON.stringify({
                theme: theme
            })
        })
        .done(function(data, textStatus, jqXHR) {
            onOK(data);
        })
        .fail(function(jqXHR, textStatus, errorThrown) {
            onKO(jqXHR);
        });
};
VsixMvcAppResult.Ajax.CultureSet = function(culture, onOK, onKO) {
    var jqxhr = jQuery.ajax({
            url: "/api/user/culture",
            type: "POST",
            data: JSON.stringify({
                culture: culture
            })
        })
        .done(function(data, textStatus, jqXHR) {
            onOK(data);
        })
        .fail(function(jqXHR, textStatus, errorThrown) {
            onKO(jqXHR);
        });
};
VsixMvcAppResult.Ajax.UserUpdateLastActivity = function(onOK, onKO, onComplete) {
    var jqxhr = jQuery.ajax({
            url: "/api/user/lastActivity",
            type: "PUT",
            data: {},
            //dataType: "html",
            cache: false
        })
        .done(function(data, textStatus, jqXHR) {
            onOK(data);
        })
        .fail(function(jqXHR, textStatus, errorThrown) {
            onKO(jqXHR);
        })
        .always(function(jqXHR, textStatus, errorThrown) {
            onComplete();
        });
};

VsixMvcAppResult.Ajax.UserMenu = function(onOK, onKO, onComplete) {
    var jqxhr = jQuery.ajax({
            url: "/api/user/menu",
            type: "GET",
            data: {},
            //dataType: "html",
            cache: false
        })
        .done(function(data, textStatus, jqXHR) {
            onOK(data);
        })
        .fail(function(jqXHR, textStatus, errorThrown) {
            onKO(jqXHR);
        })
        .always(function(jqXHR, textStatus, errorThrown) {
            onComplete();
        });
};;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

VsixMvcAppResult.Widgets = {};;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

jQuery.widget("ui.widgetBase",
{
    options: {
        allowClose: false,                 // creates a close button on the top-right of a widget
        allowCollapse: false,          // creates a collapse button
        isCollapsed: false,             // initializes as a collapsed item
        allowCssClasses: true     // apply jquery theme classes to elements in a widget
    },
    _create: function () {

        jQuery.Widget.prototype._create.call(this);

        jQuery(this.element).addClass(this.namespace + '-' + this.widgetName);

        //        if (window.console) {
        //            this.log(this.element);
        //            this.log("CREATE namespace" + "---" + this.namespace + "widgetBaseClass" + "---" + this.widgetBaseClass + "widgetName" + "---" + this.widgetName);
        //        }
    },
    _init: function () {

        // TODO: check this is really needed
        jQuery.Widget.prototype._init.call(this);

        this.allowClose();
        this.allowCollapse();

        //        if (window.console) {
        //            this.log("INIT namespace" + "---" + this.namespace + "widgetBaseClass" + "---" + this.widgetBaseClass + "widgetName" + "---" + this.widgetName);
        //        }

    },
    destroy: function () {
        // TODO: check this is really needed
        jQuery.Widget.prototype.destroy.call(this);

        //this.log("DESTROY namespace" + "---" + this.namespace + "widgetBaseClass" + "---" + this.widgetBaseClass + "widgetName" + "---" + this.widgetName);
    },
    log: function (logMessage) {
        if (window.console) {
            console.log(logMessage);
        }
    },
    addCss: function (css) {
        // TODO: check 'head' exists
        jQuery('head').append(css);
    },
    dumpProps: function (obj, parent, tmp) {
        // creates an array of name/value properties recursively
        // var propertiesArray = dumpProps(objectInstance, nullOrParentObject, []);
        for (var i in obj) {
            var tmpProp = { name: null, value: null };
            tmpProp.name = i;
            tmpProp.value = obj[i];
            tmp.push(tmpProp);
            if (typeof obj[i] == "object") {
                if (parent) {
                    tmp = this.dumpProps(obj[i], parent + "." + i, tmp);
                }
                else {
                    tmp = this.dumpProps(obj[i], i, tmp);
                }
            }
        }
        return tmp;
    }, 
    boxButtonsContainerGet: function () {
        var self = this;

        if(jQuery(this.element)
            .find('div.ui-widget-header:first')
                .find('div.ui-widget-boxButtons:first')
                .length === 0)
        {
            jQuery(this.element)
                .find('div.ui-widget-header:first')
                    .wrapInner("<div class='ui-widget-headerText'></div>")
                    .append('<div class="ui-widget-boxButtons"></div>');
        }

        return jQuery(this.element)
                .find('div.ui-widget-header:first')
                    .find('div.ui-widget-boxButtons:first');
    }, 
    allowClose: function () {

        if (this.options.allowClose) {

            var self = this;

            var $p = self.boxButtonsContainerGet();

            $p.append('<div class="ui-widget-close ui-corner-all ui-icon ui-icon-close"></div>')
              .find('div.ui-widget-close:first')
                .click(function () {
                    jQuery(self.element).toggle();
                })
                .show();
        }
    }, 
    allowCollapse: function () {

        if (this.options.allowCollapse) {
            var self = this;

            var collapseFunc = function () {
                var $content = jQuery(self.element).find('div.ui-widget-content');
                $content.toggle();
                jQuery(self.element).find('div.ui-widget-collapse:first').toggleClass('ui-icon-triangle-1-n', $content.is(':visible')).toggleClass('ui-icon-triangle-1-s', !$content.is(':visible'));
                self._trigger('onCollapsed', null, $content.is(':visible') ? true : false);
            };

            var $p = self.boxButtonsContainerGet();

            $p.append('<div class="ui-widget-collapse ui-corner-all ui-icon ui-icon-triangle-1-s"></div>')
              .find('div.ui-widget-collapse:first')
              .click(function (e) {

                  var $c = jQuery(e.target);

                  if ($c.is("div") && $c.hasClass("ui-widget-collapse")) {
                      collapseFunc();
                  }
                  else {
                      if ($c.is("span") && $c.parents("div:first").hasClass("ui-widget-collapse")) {
                          collapseFunc();
                      }
                  }
              })
              .removeClass('ui-icon-triangle-1-n')
              .addClass('ui-icon-triangle-1-s')
              .show();

            if (self.options.isCollapsed) {
                collapseFunc();
            }
        }
    }
});;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />


/*******************************************************************************
                            HELPER PUBLIC METHODS
********************************************************************************/


VsixMvcAppResult.Widgets.jQueryzer = function (selector) {
    jQuery(selector).widgetJqueryzer();
};


/*******************************************************************************
                            WIDGET DEFINITION
********************************************************************************/

jQuery.widget('ui.widgetJqueryzer', jQuery.ui.widgetBase,
{
    options: {

    },
    _init: function () {
        jQuery.ui.widgetBase.prototype._init.call(this);
    },
    _create: function () {

        jQuery.ui.widgetBase.prototype._create.call(this);

        var $list = jQuery(this.element).find(
                                    'div[data-widget],' +
                                    'table[data-widget],' +
                                    'input[data-widget],' +
                                    'ul[data-widget],' +
                                    'button[data-widget]');

        for (var i = 0; i < $list.length; i++) {

            var $listItem = jQuery($list[i]);
            var widgetName = $listItem.attr('data-widget');

            this.item($listItem, widgetName);

        }
    }, 
    destroy: function () {
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    }, 
    item: function ($listItem, widgetName) {
        switch (widgetName) {
            case 'widgetBase':
                $listItem.widgetBase({
                    allowCollapse: parseBoolean($listItem.attr('data-widget-allowCollapse')),
                    allowClose: parseBoolean($listItem.attr('data-widget-allowClose')),
                    isCollapsed: parseBoolean($listItem.attr('data-widget-isCollapsed')),
                    onCollapsed: function (e, isVisible) {
                        try {
                            /*jslint evil: true */
                            eval($listItem.attr('data-widget-jsOnCollapse'));
                        }
                        catch (ex) {

                        }
                    }
                });
                break;
            case 'widgetModelItem':
                $listItem.widgetFormItem({
                    changed: function (e, id) {
                        $listItem.parents('form:first').find('div.ui-widgetForm-ValidationSummary').widgetFormSummary('deleteByKey', id);
                    }
                });
                break;
            case 'widgetGrid':
                $listItem.widgetGrid();
                break;
            case 'ui-widgetBoolean':
                $listItem.widgetBoolean();
                break;
            case 'dateSelector':
                $listItem.dateSelector({
                    text: VsixMvcAppResult.Resources.clickToPickDate,
                    value: Globalize.parseDate($listItem.attr('data-value'))
                });
                break;
            case 'widgetMsg':
                VsixMvcAppResult.Widgets.DialogInline.Create($listItem);
                break;
            case 'widgetButton':
                $listItem.widgetButton();
                break;
            case 'widgetFormSummary':
                $listItem.widgetFormSummary();
                break;
            default:
                //console.log($listItem);
                break;
        }
    }
});

;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

jQuery.widget("ui.widgetFormItem", jQuery.ui.widgetBase,
{
    options: {

    },
    _create: function () {
        // TODO: check this is really needed
        jQuery.ui.widgetBase.prototype._create.call(this);

        var self = this;

        jQuery(this.element)
            .find(':input')
                .change(function () {
                    jQuery(self.element).removeClass('ui-state-error').find('div.ui-widgetForm-inputError').remove();
                    self._trigger('changed', null, jQuery(this).attr('id'));
                });
    },
    _init: function () {

        // TODO: check this is really needed
        jQuery.ui.widgetBase.prototype._init.call(this);

    }, 
    destroy: function () {
        // TODO: check this is really needed
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    }
});

jQuery.widget("ui.widgetFormSummary", jQuery.ui.widgetBase,
{
    options: {

    },
    _create: function () {
        // TODO: check this is really needed
        jQuery.ui.widgetBase.prototype._create.call(this);
    },
    _init: function () {

        // TODO: check this is really needed
        jQuery.ui.widgetBase.prototype._init.call(this);

    }, 
    destroy: function () {
        // TODO: check this is really needed
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    }, 
    deleteByKey: function (key) {
        jQuery(this.element).find('li[modelkey="' + key + '"]').remove();
        if (jQuery(this.element).find('ul').find('li').length === 0) {
            jQuery(this.element).hide();
        }
    }
});

;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

jQuery.widget("ui.widgetBoolean", jQuery.ui.widgetBase,
{
    options: {
        isNullable: false, 
        icons: [], 
        values: []
    },
    _create: function () {

        jQuery.ui.widgetBase.prototype._create.call(this);

        if (jQuery(this.element).attr('data-widget-nullable') !== undefined) {
            this.options.isNullable = jQuery(this.element).attr('data-widget-nullable').toString().toLowerCase() == "true";
        }

        this.options.icons = ['ui-icon-check', 'ui-icon-closethick'];
        this.options.values = [true, false];

        if (this.options.isNullable) {
            this.options.icons.push('ui-icon-help');
            this.options.values.push(null);
        }

    },
    _init: function () {

        jQuery.ui.widgetBase.prototype._init.call(this);

        var self = this;
        var $el = jQuery(this.element);
        var icons = null;
        var values = null;

        jQuery(this.element)
                            .find('button')
                                .click(function () {

                                    var nextIndex = self._getNextIndex();
                                    var nextClassName = self.options.icons[nextIndex];

                                    console.log(nextClassName);

                                    jQuery(this)
                                        .find('span')
                                        .removeClass(self.options.icons.join(" "))
                                        .addClass(nextClassName);

                                    switch (nextClassName) {
                                        case 'ui-icon-check':
                                            $el.find(':checkbox').attr('checked', 'checked');
                                            if (self.options.isNullable) { $el.find('input[type="hidden"]').val(''); }
                                            break;
                                        case 'ui-icon-closethick':
                                            $el.find(':checkbox').removeAttr('checked');
                                            if (self.options.isNullable) { $el.find('input[type="hidden"]').val('false'); }
                                            break;
                                        case 'ui-icon-help':
                                            $el.find(':checkbox').removeAttr('checked');
                                            if (self.options.isNullable) { $el.find('input[type="hidden"]').val(''); }
                                            break;
                                    }
                                });

    }, 
    destroy: function () {
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    }, 
    _getCurrentIndex: function () {

        //var $el = jQuery(this.element);
        var currentValue = null;
        var result = 0;

        if (this.options.isNullable) {
            if (jQuery(this.element).find('input[type="checkbox"]').attr('checked') == 'checked') {
                currentValue = true;
            }
            else {
                if (jQuery(this.element).find('input[type="hidden"]').val() == "false") {
                    currentValue = false;
                }
            }
        }
        else {
            currentValue = jQuery(this.element).find('input[type="checkbox"]').attr('checked') == 'checked';
        }

        for (var i = 0; i < this.options.values.length; i++) {
            if (currentValue == this.options.values[i]) {
                result = i;
                break;
            }
        }


        return result;
    }, 
    _getNextIndex: function () {
        var i = this._getCurrentIndex();
        var result = (i + 1) >= (this.options.values.length) ? 0 : (i + 1);
        return result;
    }

});;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

jQuery.widget("ui.widgetGrid", jQuery.ui.widgetBase,
{
    options: {

    }, 
    _create: function () {
        jQuery.ui.widgetBase.prototype._create.call(this);
    }, 
    _init: function () {

        jQuery.ui.widgetBase.prototype._init.call(this);

//        var self = this;

//        jQuery(window).resize(function () {
//            self._doResize();
//        });
//        self._doResize();
//        self._initPaginable();
//        self._initSortable();
    }, 
    destroy: function () {
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    }
//    , _doResize: function () {
//        var self = this;
//        var $el = jQuery(self.element);
//        if ($el.hasClass('ui-widgetGrid-tableLess')) {
//            var nColumns = $el.find('div.ui-widgetGrid-body').find('div.ui-widgetGrid-row:first').find('div.ui-widgetGrid-column-content').length;
//            $el.find('div.ui-widgetGrid-column').width((($el.parents('*:first').innerWidth()) / (nColumns)) - (2 * nColumns));
//        }
//    }
//    , _initSortable: function () {
//        var self = this;
//        jQuery(this.element)
//            .find('div.ui-widgetGrid-header:first, thead.ui-widgetGrid-header:first')  //widgetGrid can be "tableless"
//                .find('div.ui-widgetGrid-column, th.ui-widgetGrid-column')
//                    .find('div.ui-widgetGrid-column-content')
//                        .click(function () {
//                            jQuery(this)
//                                .parents('form:first')
//                                    .submit();
//                        });
//    }
//    , _initPaginable: function () {
//        var self = this;
//        jQuery(this.element)
//            .find('div.ui-widgetGrid-pager:first, tfoot.ui-widgetGrid-pager:first')  //widgetGrid can be "tableless"
//                .find('li')
//                    .find('button')
//                        .click(function () {
//                            jQuery(this)
//                                .parents('form:first')
//                                    .submit();
//                        })
//                    .end()
//                .end()
//            .end();
//    }
});
;
VsixMvcAppResult.Widgets.AjaxProgress = function () {


    

    var me = {},
        $ajaxProgress = jQuery('<div class="ui-ajaxProgress-box"><div class="ui-ajaxProgress-boxChild ui-widget ui-widget-content ui-state-active">Plase wait while loading</div></div>')
                        .hide();

    me.Create = function () {
        jQuery('body').append($ajaxProgress);
        jQuery(document)
            .ajaxStart(function () {
                $ajaxProgress.fadeIn();
            })
            .ajaxStop(function () {
                $ajaxProgress.fadeOut();
            });
    };

    return me;
};


;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

jQuery.widget("ui.widgetButton", jQuery.ui.widgetBase,
{
    options: {

    },
    _create: function () {

        jQuery.ui.widgetBase.prototype._create.call(this);

    },
    _init: function () {

        jQuery.ui.widgetBase.prototype._init.call(this);

        var $el = jQuery(this.element);

        //if button requires confirmation. We append functionality to do so
        if ($el.attr('data-widget-confirmButton') !== undefined) {
            var $btn = $el;
            var proxiedClick = null;
            if ($btn.attr('onclick') !== undefined) {
                proxiedClick = $btn.attr('onclick');
                $btn.removeAttr('onclick');
            }
            
            var answered = null;
            
            var newClick = function () {
                
                VsixMvcAppResult.Widgets.Dialogs.createOkCancelMessage(
                    VsixMvcAppResult.Resources.confirmToContinue, 
                    function () {
                        answered = true;
                        if (proxiedClick !== null) {
                            $btn.attr('onclick', proxiedClick);
                            $btn.unbind('click');
                            $btn.click();
                            $btn.removeAttr('onclick');
                            $btn.bind('click', null, newClick);
                        }
                        else {
                            $btn.click();
                        }
                    }, 
                    function () {

                    });
                
                if (answered !== null) {
                    answered = null;    // reinitializes flag
                }
                else {
                    return false;
                }
            };
            $btn.bind('click', null, newClick);
        }
    },
    destroy: function () {
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    }
});;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

jQuery.widget("ui.userOptions", jQuery.ui.widgetBase, {
    options: {

    },
    _create: function() {
        jQuery.ui.widgetBase.prototype._create.call(this);
    },
    _init: function() {

        jQuery.ui.widgetBase.prototype._init.call(this);

        //this.initMenuNav();
        this._updateUserLastActivity();
    },
    destroy: function() {
        jQuery.ui.widgetBase.prototype.destroy.call(this);
    },
    _errMsgSet: function(selector, msg) {
        jQuery(selector)
            .append("<div></div><div class='ui-carriageReturn'></div>")
            .find("div:first")
            .html(msg);

        VsixMvcAppResult.Widgets.DialogInline.Create(jQuery(selector).find("div:first"), VsixMvcAppResult.Widgets.DialogInline.MsgTypes.Error);
    },
    _updateUserLastActivity: function() {
        var self = this;

        VsixMvcAppResult.Ajax.UserUpdateLastActivity(
            function(data, textStatus, jqXHR) {
                jQuery(self.element).append(data);
                VsixMvcAppResult.Widgets.jQueryzer(self.element);
            },
            function(jqXHR, textStatus, errorThrown) {
                self._errMsgSet(jQuery(self.element), VsixMvcAppResult.Resources.unExpectedError);
            },
            function() {
                self._initMenuNav();
            });
    },
    _initMenuNav: function() {

        //TODO: load async Menu based on user identity
        var self = this;
        var $panelMenu = jQuery('#panelMenu');
        var $panelContent = jQuery('#panelContent');

        VsixMvcAppResult.Ajax.UserMenu(
            function(data, textStatus, jqXHR) {

                $panelMenu.navMenu({
                    IMenuModel: data
                });

                jQuery('#menuToggle').click(function() {

                    $panelMenu.show('slide', function() {
                        if (jQuery(this).is(':visible')) {

                            jQuery(document).bind("click", function(e) {

                                var menuClicked = jQuery(e.target).parents($panelMenu.selector).length > 0;

                                if (!menuClicked) {

                                    $panelMenu.hide('slide', function() {
                                        $panelMenu.navMenu('collapseAll');
                                    });

                                    jQuery(document).unbind("click");
                                }
                            });
                        }
                    });
                });
            },
            function(jqXHR, textStatus, errorThrown) {
                self._errMsgSet($panelMenu, VsixMvcAppResult.Resources.unExpectedError);
            },
            function() {
                self._trigger('complete', null, null);
            });



    }
});;/// <reference path="../../Scripts.T4Templates/VsixMvcAppResult.Js.Intellisense.js" />



jQuery.widget("ui.dateSelector", 
{
    options: {
        value: null
        , text: 'Pick up a date'
    }
    , getDate: function () {
        if (jQuery(this.element).find('input').val() != '') {
            return jQuery(this.element).find('input').datepicker('getDate');
        }
        else {
            return null;
        }
    }
    , _create: function () {
        jQuery.Widget.prototype._create.call(this);
    }
    , destroy: function () {
        jQuery(this.element).unwrap();
        jQuery.Widget.prototype.destroy.call(this);
    }
    , _init: function () {

        var self = this;

        jQuery.Widget.prototype._init.call(this);

        if (!jQuery(this.element).hasClass('hasDatepicker')) {

            jQuery(this.element)
                .hide()
                .datepicker({
                    showButtonPanel: true
                    , changeMonth: true
                    , changeYear: true
                    , gotoCurrent: true
                    , onSelect: function () {
                        self._setDateLabel();
                    }
                });

            if (jQuery(this.element).attr('data-isWrapped') === undefined) {
                jQuery(this.element).wrap('<div class="ui-dateSelector"></div>')
                                    .parents('div.ui-dateSelector:first')
                                    .append('<a href="javascript:void(0);">' + self.options.text + '</a>')
                                    .append('<div class="ui-state-error"><span class="ui-icon ui-icon-circle-close"></span></div>')
                                    .find('div.ui-state-error')
                                        .css('width', '17')
                                        .css('height', '17')
                                        .css('margin-right', '10px')
                                        .css('float', 'left')
                                        .css('cursor', 'pointer')
                                        .hide();
            }

            jQuery(this.element)
                .parents('div:first')
                    .find('div.ui-state-error')
                        .click(function () {
                            jQuery(this).hide();
                            jQuery(self.element)
                                    .val('')
                                    .parents('div:first')
                                        .find('a')
                                            .html(self.options.text);
                        })
                    .end()
                    .find('a')
                        .click(function () {
                            jQuery(self.element).datepicker('show');
                        });

            jQuery(this.element).datepicker('setDate', self.options.value);
            if (self.options.value != null) {
                self._setDateLabel();
            }
        }
    }
    , _setDateLabel: function () {
        var self = this;
        jQuery(self.element)
            .parents('div:first')
            .find('a')
                .html(Globalize.format(jQuery(self.element).datepicker('getDate'), "D"))
            .end()
            .find('div')
                .show();
    }
});;


window.$wMsgGlobal =
{
    // template used to decorate message content
    htmlTemplate: '<div class="ui-widget ui-widgetMsgWrapper ui-corner-all"><p class="widgetMsgStyleContent"><span class="widgetIcon ui-icon"></span></p></div>'
    // template used to decorate Yes/No buttons in case widget's type is enumMsgType.ConfirmYesNo
    //, yesNoButtonsTmpl: '<div class="widgetYesNoButtons"><div class="ui-message-yes ui-button ui-state-default ui-corner-all"><span class="ui-icon ui-icon-check"></span>Ok</div><div class="ui-message-no ui-button ui-state-default ui-corner-all"><span class="ui-icon ui-icon-close"></span>Cancel</div></div>'
    , yesNoButtonsTmpl: '<div class="widgetYesNoButtons"><button type="button">Ok</button><button type="button">Cancel</button></div>'
}

//enumeration message types
function enumMsgType() { }
enumMsgType.Success = 0;
enumMsgType.Warning = 1;
enumMsgType.Error = 2;
enumMsgType.ConfirmYesNo = 3;
enumMsgType.GetEnumTypeByNum = function(num){
    switch (num) {
        case 1:
            return enumMsgType.Warning;
            break;
        case 2:
            return enumMsgType.Error;
            break;
        case 3:
            return enumMsgType.ConfirmYesNo;
            break;
        default:
                return enumMsgType.Success;
                break;
    }
};


(function($) {
    jQuery.widget('ui.widgetMsg', {
        options:{
            msgType :null
            , allowClose: null
            , autoHide: null
            , onAccept: null
            , onCancel: null
        }
        , _create: function() {

            var $el = jQuery(this.element);
            var o = this.options;

            if(o.msgType == null)
            {
                o.msgType = enumMsgType.GetEnumTypeByNum(parseInt($el.attr('data-widget-msgType')));
            }
            if(o.msgType == null)
            {
                o.msgType = enumMsgType.Success;
            }
            
            if(o.allowClose == null)
            {
                o.allowClose = $el.attr('data-widget-allowClose') == 'true';
            }
            if(o.allowClose == null)
            {
                o.allowClose = false;
            }

            if(o.autoHide == null)
            {
                o.autoHide = $el.attr('data-widget-autoHide') == 'true';
            }
            if(o.autoHide == null)
            {
                o.autoHide = false;
            }

            if($el.attr('data-widget-onAccept')!='')
            {
                o.onAccept = function(){ eval($el.attr('data-widget-onAccept')); };
            }

            if($el.attr('data-widget-onCancel')!='')
            {
                o.onCancel = function(){ eval($el.attr('data-widget-onCancel')); };
            }

        },
        _init: function(){

            var w = this;
            var $el = jQuery(this.element);
            var o = this.options;

            // wrap element contents into window feedback message template
            var elHtml = $el.html();
            $el.addClass('ui-message').html($wMsgGlobal.htmlTemplate);
            $el.find('.widgetMsgStyleContent').append(elHtml);

            //store jquery results for later use
            var $wDiv = $el.find('div.ui-widget:first');
            var $wIcon = $el.find('span.widgetIcon:first');

            if(!isNaN(o.msgType))
            {
                o.msgType = enumMsgType.GetEnumTypeByNum(o.msgType);
            }

            switch (o.msgType) {
                case (enumMsgType.ConfirmYesNo):
                    $wDiv.addClass('ui-state-default');
                    $wIcon.addClass('ui-icon-help');
                    //append buttons to feedback message
                    jQuery($wMsgGlobal.yesNoButtonsTmpl).appendTo($el.find('div.ui-widget:first'));
                    
                    $wDiv
                        .find('button:first').button({
                            icons:{
                                primary: 'ui-icon-check'
                            }
                        })
                        .click(function(){
                            if(o.onAccept!=null)
                            {
                                o.onAccept(this, true);
                            }
                            else
                            {
                                w._trigger('answered', null, { confirm: true });
                            }
                        })
                        .end()
                        .find('button:last').button({
                            icons: {
                                primary: 'ui-icon-close'
                            }
                        })
                        .click(function(){
                            if(o.onCancel!=null)
                            {
                                o.onCancel(this, false);
                            }
                            else
                            {
                                w._trigger('answered', null, { confirm: false });
                            }
                        });
                    break;
                case (enumMsgType.Warning):
                    $wDiv.addClass('ui-state-highlight');
                    $wIcon.addClass('ui-icon-info');
                    break;
                case (enumMsgType.Success):
                    $wDiv.addClass('ui-state-active');
                    $wIcon.addClass('ui-icon-check');
                    break;
                case (enumMsgType.Error):
                    $wDiv.addClass('ui-state-error');
                    $wIcon.addClass('ui-icon-alert');
                    $el.find('p.widgetMsgStyleContent:first').addClass('ui-state-error-text');
                    break;
                default:
                    break;
            }

            if(o.allowClose==true)
            {
                this.allowClose();
            }

            if(o.autoHide==true)
            {
                $el.delay(1000).fadeOut(2000);
            }
        
        },
        destroy: function() {
            //release events
            if (this.options.msgType == enumMsgType.ConfirmYesNo) {
                jQuery(this.element).find('div.ui-message-yes, div.ui-message-no').unbind('click').unbind('mouseenter mouseleave');
            }
            jQuery.Widget.prototype.destroy.apply(this, arguments);
        }, 
        allowClose: function () {
                var self = this;
                jQuery(this.element)
                    .find('div.ui-widgetMsgWrapper:first')
                        .append('<div class="ui-widget-close ui-corner-all ui-icon ui-icon-close"></div>')
                    .end()
                    .find('div.ui-widget-close')
                        .click(function () {
                            jQuery(self.element).toggle();
                        })
                        .show();
            }
    });

    jQuery.extend(jQuery.ui.widgetMsg, {
        defaults: {}
    });

})(jQuery);;/// <reference path="VsixMvcAppResult.A.Intellisense.js" />

VsixMvcAppResult.Widgets.Dialogs =
{
    _html: '<div class="ui-template-dialog"><div class="ui-template-dialogIcon"><span class="ui-icon "></span></div><div class="ui-template-dialogMsg"></div></div>', 
    createCustomInfo: function (message, onClose) {
        
        var dButtons = {};
        dButtons[VsixMvcAppResult.Resources.close] = function () { jQuery(this).dialog('close'); };
        
        jQuery(VsixMvcAppResult.Widgets.Dialogs._html)
            .find('div.ui-template-dialogIcon span')
                .addClass('ui-icon-info')
                .end()
            .find('div.ui-template-dialogMsg')
                .html(message)
            .end()
            .dialog({
            resizable: false,
            modal: true,
            title: VsixMvcAppResult.Resources.siteTitle,
            buttons: dButtons,
            close: function () {
                if (onClose) {
                    onClose();
                }
                jQuery(this).dialog('destroy');
            }
        });
    }, 
    createCustomSuccess: function (message, onOk, onClose) {
        
        var dButtons = {};
        dButtons[VsixMvcAppResult.Resources.accept] = function () { jQuery(this).dialog('close'); onOk(); };
        
        jQuery(VsixMvcAppResult.Widgets.Dialogs._html)
            .find('div.ui-template-dialogIcon span')
                .addClass('ui-icon-check')
                .end()
            .find('div.ui-template-dialogMsg')
                .html(message)
            .end()
            .dialog({
            resizable: false,
            modal: true,
            title: VsixMvcAppResult.Resources.siteTitle,
            buttons: dButtons,
            close: function () {
                if (onClose) {
                    onClose();
                }
                jQuery(this).dialog('destroy');
            }
        });
    }, 
    createOkCancelMessage: function (message, onOk, onKO) {
        
        var dButtons = {};
        dButtons[VsixMvcAppResult.Resources.accept] = function () { jQuery(this).dialog('close'); onOk(); };
        dButtons[VsixMvcAppResult.Resources.cancel] = function () { jQuery(this).dialog('close'); onKO(); };
        
        jQuery(VsixMvcAppResult.Widgets.Dialogs._html)
            .find('div.ui-template-dialogIcon span')
                .addClass('ui-icon-help')
                .end()
            .find('div.ui-template-dialogMsg')
                .html(message)
            .end()
            .dialog({
            resizable: false,
            modal: true,
            title: VsixMvcAppResult.Resources.siteTitle,
            buttons: dButtons,
            close: function () {
                jQuery(this).dialog('destroy');
            }
        });
    }, 
    createErrorMessage: function (message, onClose) {
        
        var dButtons = {};
        dButtons[VsixMvcAppResult.Resources.close] = function () { jQuery(this).dialog('close'); };
        
        jQuery(VsixMvcAppResult.Widgets.Dialogs._html)
            .find('div.ui-template-dialogIcon span')
                .addClass('ui-icon-alert')
                .end()
            .find('div.ui-template-dialogMsg')
                .html(message);
        
        jQuery(VsixMvcAppResult.Widgets.Dialogs._html)
            .dialog({
            resizable: false,
            modal: true,
            title: VsixMvcAppResult.Resources.siteTitle,
            buttons: dButtons,
            close: function () {
                jQuery(this).dialog('destroy');
                if (onClose) {
                    onClose();
                }
            }
        });
    }
};
;
VsixMvcAppResult.Widgets.DialogInline =
{
    MsgTypes: {
        Success: 0, 
        Warning: 1, 
        Error: 2, 
        Confirm: 3
    }, 
    Create: function (selector, msgType, onAnswered) {
        jQuery(selector).widgetMsg({
            msgType: msgType, 
            answered: function (e, args) {
                onAnswered(e, args);
            }
        });
    }
};;(function($) {
    jQuery.widget("ui.navMenu", {
        options: {
            selectable: true,
            IMenuModel: null
        },
        _create: function() {

            var w = this;

            if (this.options.IMenuModel !== null) {
                this.bind(this.options.IMenuModel);
            }

            w._initItem(jQuery(this.element).find("li"));
            w._initChildList(jQuery(this.element).find("ul"));

            var $lisOpen = jQuery(this.element).find("li[class*='ui-treeList-open']");
            w.openNode($lisOpen);
            w.openNode($lisOpen.parents('li'));

            jQuery(this.element)
                .addClass('ui-treeList ui-widget-content ui-corner-all')
                .bind('click', function(e) {
                    var $t = jQuery(e.target);

                    var $node = null;

                    if ($t.hasClass('ui-treeList-toggle')) {
                        $node = $t.parents('li.ui-treeList-item:first');
                    } else {
                        if ($t.hasClass('ui-treeList-item')) {
                            $node = $t;
                        } else {
                            if ($t.hasClass('ui-treeList-link')) {
                                $node = $t.parents('li.ui-treeList-item:first');
                            }
                        }
                    }


                    if ($node !== null) {
                        if ($node.find('ul:first').length > 0) {
                            var b = $node.find('ul:first').is(':visible');
                            if (b) w.closeNode($node);
                            else w.openNode($node);
                        } else {
                            if ($node.find('a:first').length > 0) {
                                window.location.href = $node.find('a:first').attr('href');
                            }
                        }
                    }

                })
                .css('height', jQuery(document).height()-20)
                .disableSelection();


        },
        destroy: function() {

            jQuery(this.element)
                .unbind('click')
                .removeClass('ui-treeList ui-widget-content ui-corner-all')
                .find('li')
                .unbind('mouseenter mouseleave')
                .removeClass('ui-treeList-item ui-widget-content ui-corner-all ui-state-default ui-state-active ui-state-hover')
                .children('div.ui-treeList-toggle')
                .remove()
                .end()
                .find('ul')
                .unbind('mouseenter mouseleave')
                .removeClass('ui-treeList-childs');

            jQuery.Widget.prototype.destroy.call(this);
        },
        _initItem: function($lis) {
            $lis.addClass('ui-treeList-item ui-widget-content ui-corner-all ui-state-default')
                .find('a:first')
                .addClass('ui-treeList-link');

            return;
        },
        _initChildList: function($uls) {
            $uls.addClass('ui-treeList-childs')
                .hide()
                .before('<div class="ui-treeList-toggle ui-icon ui-icon-triangle-1-s"></div>');
        },
        openNode: function($lisOpen) {
            if ($lisOpen) {
                $lisOpen.removeClass('ui-state-default')
                    .children('ul')
                    .show()
                    .siblings('div.ui-treeList-toggle')
                    .removeClass('ui-icon ui-icon-triangle-1-s')
                    .addClass('ui-icon ui-icon-triangle-1-n')
                    .end()
                    .end()
                    .find('ul:has(li)')
                    .parents('li')
                    .removeClass('ui-state-default');
            }
        },
        closeNode: function($lisClose) {
            if ($lisClose) {
                $lisClose.addClass('ui-state-default')
                    .children('ul')
                    .hide()
                    .siblings('div.ui-treeList-toggle').removeClass('ui-icon-triangle-1-n').addClass('ui-icon ui-icon-triangle-1-s');
            }
        },
        selected: function($lis) {
            if ($lis) {
                jQuery(this.element).find('li').removeClass('ui-state-active');
                $lis.addClass('ui-state-active');
                this._trigger('onSelect');
            } else {
                return jQuery(this.element).find('li.ui-state-active');
            }
        },
        collapseAll: function() {
            this.closeNode(jQuery(this.element).find('li'));
        },
        bind: function(IMenuModel) {

            /* // IMenuModel sample
            var k = [{
                url: null,
                text: "menu item 1",
                childs: [{
                    url: "/anUrl",
                    text: "submenu item 1 "
                }]

            }, {
                url: "/anUrl2",
                text: "Menu item 2 with no childs",
            }];
            */

            var menuItemRender = function(IMenuItem) {
                var $li = jQuery('<li></li>');
                var $a = jQuery('<a>' + IMenuItem.text + '</a>');
                if (IMenuItem.url) {
                    $li.attr('data-action', IMenuItem.url);
                    $a.attr('href', IMenuItem.url);
                } else {
                    //$a.attr('href', 'javascript:void(0);');
                    $a.attr('href', '#').click(function () { });
                }
                $li.append($a);

                if (IMenuItem.childs) {
                    var $ul = jQuery('<ul></ul>');
                    for (var i = 0; i < IMenuItem.childs.length; i++) {
                        $ul.append(menuItemRender(IMenuItem.childs[i]));
                    }
                    $li.append($ul);
                }
                return $li;
            };

            for (var i = 0; i < IMenuModel.length; i++) {
                jQuery(this.element).append(menuItemRender(IMenuModel[i]));
            }


        }


    });

})(jQuery);;
(function ($) {
    jQuery.widget("jv.treeList", {
        options: { selectable: true },
        _create: function () {

            var w = this;
            w._initItem(jQuery(this.element).find("li"));
            w._initChildList(jQuery(this.element).find("ul"));

            var $lisOpen = jQuery(this.element).find("li[class*='ui-treeList-open']");
            w.openNode($lisOpen);
            w.openNode($lisOpen.parents('li'));

            jQuery(this.element)
                .addClass('ui-treeList ui-widget-content ui-corner-all')
                .bind('click', function (e) {
                    var $t = jQuery(e.target);
                    if ($t.hasClass('ui-treeList-toggle')) {
                        var b = $t.siblings('ul').is(':visible');
                        if (b) w.closeNode($t.parents('li:first'));
                        else w.openNode($t.parents('li:first'));
                    }
                    if ($t.hasClass('ui-treeList-item')) {
                        w.selected($t);
                    }
                    //return false;
                })
                .disableSelection();
        },
        destroy: function () {

            jQuery(this.element)
            .unbind('click')
            .removeClass('ui-treeList ui-widget-content ui-corner-all')
            .find('li')
                .unbind('mouseenter mouseleave')
                .removeClass('ui-treeList-item ui-widget-content ui-corner-all ui-state-default ui-state-active ui-state-hover')
                .children('div.ui-treeList-toggle')
                    .remove()
                .end()
                .find('ul')
                    .unbind('mouseenter mouseleave')
                    .removeClass('ui-treeList-childs');

            jQuery.Widget.prototype.destroy.call(this);
        },
        _initItem: function ($lis) {
            $lis.addClass('ui-treeList-item ui-widget-content ui-corner-all ui-state-default')
                  .hover(
                        function () { jQuery(this).addClass('ui-state-hover').parents('li').removeClass('ui-state-hover');; return false; }
                        , function () { jQuery(this).removeClass('ui-state-hover'); return false; }
                    );
        },
        _initChildList: function ($uls) {
            $uls.addClass('ui-treeList-childs')
                    .hide()
                    .before('<div class="ui-treeList-toggle ui-icon ui-icon-triangle-1-s"></div>');
        },
        openNode: function ($lisOpen) {
            if ($lisOpen) {
                $lisOpen.children('ul')
                                .show()
                                .siblings('div.ui-treeList-toggle')
                                    .removeClass('ui-icon ui-icon-triangle-1-s')
                                    .addClass('ui-icon ui-icon-triangle-1-n')
                                    .end()
                                .end()
                                .find('ul:has(li)')
                                    .parents('li')
                                        .removeClass('ui-state-default');
            }
        }
        ,
        closeNode: function ($lisClose) {
            if ($lisClose) {
                $lisClose.addClass('ui-state-default')
                                .children('ul')
                                .hide()
                                .siblings('div.ui-treeList-toggle').removeClass('ui-icon-triangle-1-n').addClass('ui-icon ui-icon-triangle-1-s');
            }
        }
        , selected: function ($lis) {
            if ($lis) {
                jQuery(this.element).find('li').removeClass('ui-state-active');
                $lis.addClass('ui-state-active');
                this._trigger('onSelect');
            }
            else {
                return jQuery(this.element).find('li.ui-state-active');
            }
        }
    });

})(jQuery);
